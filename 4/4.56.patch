--- pipe-btfnt.hcl	2024-02-23 14:25:59.271166476 +0900
+++ pipe-btfnt.hcl.new	2024-02-23 15:35:55.289834974 +0900
@@ -139,7 +139,9 @@
 ## What address should instruction be fetched at
 word f_pc = [
 	# Mispredicted branch.  Fetch at incremented PC
-	M_icode == IJXX && !M_Cnd : M_valA;
+	M_icode == IJXX && M_ifun == UNCOND && !M_Cnd : M_valA;
+	M_icode == IJXX && !(M_ifun == UNCOND) && M_valE < M_valA && !M_Cnd : M_valA;
+	M_icode == IJXX && !(M_ifun == UNCOND) && M_valE >= M_valA && M_Cnd : M_valE;
 	# Completion of RET instruction
 	W_icode == IRET : W_valM;
 	# Default: Use predicted value of PC
@@ -183,7 +185,9 @@
 # Predict next value of PC
 word f_predPC = [
 	# BBTFNT: This is where you'll change the branch prediction rule
-	f_icode in { IJXX, ICALL } : f_valC;
+	f_icode == IJXX && f_ifun == UNCOND : f_valC;
+	f_icode == IJXX && f_valC < f_valP: f_valC;
+	f_icode in { ICALL } : f_valC;
 	1 : f_valP;
 ];
 
@@ -247,7 +251,7 @@
 ## Select input A to ALU
 word aluA = [
 	E_icode in { IRRMOVQ, IOPQ } : E_valA;
-	E_icode in { IIRMOVQ, IRMMOVQ, IMRMOVQ } : E_valC;
+	E_icode in { IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX } : E_valC;
 	E_icode in { ICALL, IPUSHQ } : -8;
 	E_icode in { IRET, IPOPQ } : 8;
 	# Other instructions don't need ALU
@@ -257,7 +261,7 @@
 word aluB = [
 	E_icode in { IRMMOVQ, IMRMOVQ, IOPQ, ICALL, 
 		     IPUSHQ, IRET, IPOPQ } : E_valB;
-	E_icode in { IRRMOVQ, IIRMOVQ } : 0;
+	E_icode in { IRRMOVQ, IIRMOVQ, IJXX } : 0;
 	# Other instructions don't need ALU
 ];
 
@@ -343,7 +347,9 @@
 
 bool D_bubble =
 	# Mispredicted branch
-	(E_icode == IJXX && !e_Cnd) ||
+	(E_icode == IJXX && E_ifun == UNCOND && !e_Cnd) ||
+	(E_icode == IJXX && !(E_ifun == UNCOND) && E_valC < E_valA && !e_Cnd) ||
+	(E_icode == IJXX && !(E_ifun == UNCOND) && E_valC >= E_valA && e_Cnd) ||
 	# BBTFNT: This condition will change
 	# Stalling at fetch while ret passes through pipeline
 	# but not condition for a load/use hazard
@@ -355,7 +361,9 @@
 bool E_stall = 0;
 bool E_bubble =
 	# Mispredicted branch
-	(E_icode == IJXX && !e_Cnd) ||
+	(E_icode == IJXX && E_ifun == UNCOND && !e_Cnd) ||
+	(E_icode == IJXX && !(E_ifun == UNCOND) && E_valC < E_valA && !e_Cnd) ||
+	(E_icode == IJXX && !(E_ifun == UNCOND) && E_valC >= E_valA && e_Cnd) ||
 	# BBTFNT: This condition will change
 	# Conditions for a load/use hazard
 	E_icode in { IMRMOVQ, IPOPQ } &&
